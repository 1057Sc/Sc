DubboBootstrap.start()

    DubboBootstrap.referServices();
        -->get ReferenceConfig instance by ReferenceConfigCache property in DubboBootstrap.class
            -->ReferenceConfig.createProxy(Map<String, String> map)
                -->ProtocolListenerWrapper.class implement Protocol(interface).refer(Class<T> type, URL url)
                    -->ListenerInvokerWrapper.class implement  Protocol(interface).refer(Class<T> type, URL url)
                        --> ProtocolFilterWrapper.class implement rotocol(interface).refer(Class<T> type, URL url)
                            -->RegistryProtocol.class implement rotocol(interface).refer(Class<T> type, URL url)
                                -->RegistryProtocol.doRefer(Cluster cluster, Registry registry, Class<T> type, URL url) \
                                    -->the implement of NotifyListener interface is RegistryDirectory.subscribe(URL url, NotifyListener listener)
                                        -->the implement of Registry interface is RegistryListenerRegistryWrapper.subscribe(URL url, NotifyListener listener)
                                            -->the implement Registry is FailbackRegistry.subscribe(URL url, NotifyListener listener)
                                                -->ZookeeperRegistry extend FailbackRegistry ->doSubscribe(final URL url, final NotifyListener listener)
                                                    --> FailbackRegistry.notify(URL url, NotifyListener listener, List<URL> urls)
                                                        --> saveProperties(url); // 将服务端注册的url更新到 disk cache
                                                            -->RegistryDirectory.refreshOverrideAndInvoker(List<URL> urls>
                                                                -->class DubboProtocol extends AbstractProtocol -> protocolBindingRefer(Class<T> serviceType, URL url)
                                                                -->DubboProtocol.getClients(URL url)
                                                                -->DubboProtocol.buildReferenceCountExchangeClientList(URL url, int connectNum)
                                                                -->DubboProtocol.buildReferenceCountExchangeClient(URL url)
                                                                -->DubboProtocol.initClient(URL url)
                                                                    -->Exchangers.connect(URL url, ExchangeHandler handler)
                                                                        -->class HeaderExchanger implements Exchanger ->connect(URL url, ExchangeHandler handler)
                                                                            -->Transporters.connect(URL url, org.apache.dubbo.remoting.ChannelHandler... handlers)
                                                                                -->class NettyTransporter implements Transporter -> connect(URL url, org.apache.dubbo.remoting.ChannelHandler handler)
                                                                                    --> NettyClient.NettyClient(final URL url, final ChannelHandler handler) -> AbstractClient(URL url, ChannelHandler handler)
                                                                                        --> establish alive connect


                                    --> cluster.join(directory);



say.hello
    ->
invoke:45, ConsumerContextFilter (org.apache.dubbo.rpc.filter)
invoke:81, ProtocolFilterWrapper$1 (org.apache.dubbo.rpc.protocol)
invoke:78, ListenerInvokerWrapper (org.apache.dubbo.rpc.listener)
invoke:56, InvokerWrapper (org.apache.dubbo.rpc.protocol)
doInvoke:82, FailoverClusterInvoker (org.apache.dubbo.rpc.cluster.support)
invoke:259, AbstractClusterInvoker (org.apache.dubbo.rpc.cluster.support)
intercept:47, ClusterInterceptor (org.apache.dubbo.rpc.cluster.interceptor)
invoke:92, AbstractCluster$InterceptorInvokerNode (org.apache.dubbo.rpc.cluster.support.wrapper)
invoke:82, MockClusterInvoker (org.apache.dubbo.rpc.cluster.support.wrapper)
invoke:74, InvokerInvocationHandler (org.apache.dubbo.rpc.proxy)
sayHello:-1, proxy0 (org.apache.dubbo.common.bytecode)
runWithBootstrap:54, Application (org.apache.dubbo.demo.consumer)
main:34, Application (org.apache.dubbo.demo.consumer)


